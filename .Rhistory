makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_martix$set()
my_martix$set
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_martix$set
my_martix$set()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$set()
my_matrix$set
my_matrix$get()
my_matrix$getinv()
my_matrix$setinv()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
inv
my_matrix$getinv()
my_matrix$getinv()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinv()
my_matrix$setinv()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
my_matrix$getinv()
